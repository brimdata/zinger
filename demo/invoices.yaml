inputs:
  - topic: Invoices
    pool: Raw
  - topic: InvoiceStatus
    pool: Raw

output:
  topic: NewInvoices
  pool: Staging

transforms:
  - type: denorm
    where: value.op in ["c", "r"]
    left: Invoices
    right: InvoiceStatus
    join-on: left.value.after.ID=right.value.after.InvoiceID
    out: NewInvoices
    zed: |
      | out:={
          key: left.key,
          value: {
            ID: left.value.after.ID,
            customer: left.value.after.customer,
            item: left.value.after.item,
            invoice_status: right.value.after.status
          }
        }
  - type: stateless
    where: value.op=="u"
    in: InvoiceStatus
    out: NewInvoices
    zed: |
      | out:={
          key: {
            ID: in.value.after.InvoiceID
          },
          value: {
            ID: in.value.after.InvoiceID,
            invoice_status: in.value.after.status
          }
        }
  - type: stateless
    where: value.op=="u"
    in: Invoices
    out: NewInvoices
    zed: |
      | out:={
          key: in.key,
          value: in.value.after
        }
  # We could get an update on InvoiceStatus after this delete and presumably
  # that would cause on update error, but maybe that's ok?
  - type: stateless
    where: value.op=="d" and value.op=="Disabled until casting null to record is fixed"
    in: Invoices
    out: NewInvoices
    zed: |
      | out:={
          key: in.key,
          value: cast(null, typeof(in.value.before))
        }
